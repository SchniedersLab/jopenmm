package edu.uiowa.jopenmm;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>OpenMMDrude</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 */
public class OpenMMDrudeLibrary implements Library {
  public static final String JNA_LIBRARY_NAME = "OpenMMDrude";
  public static final NativeLibrary JNA_NATIVE_LIB =
      NativeLibrary.getInstance(OpenMMDrudeLibrary.JNA_LIBRARY_NAME);

  static {
    Native.register(OpenMMDrudeLibrary.class, OpenMMDrudeLibrary.JNA_NATIVE_LIB);
  }
  /** Global Constants */
  public static final double OpenMM_NmPerAngstrom = 0.1;

  public static final double OpenMM_AngstromsPerNm = 10.0;
  public static final double OpenMM_PsPerFs = 0.001;
  public static final double OpenMM_FsPerPs = 1000.0;
  public static final double OpenMM_KJPerKcal = 4.184;
  public static final double OpenMM_KcalPerKJ = 1.0 / 4.184;
  public static final double OpenMM_RadiansPerDegree = 3.1415926535897932385 / 180.0;
  public static final double OpenMM_DegreesPerRadian = 180.0 / 3.1415926535897932385;
  public static final double OpenMM_SigmaPerVdwRadius = 1.7817974362806786095;
  /**
   * OpenMM_3D_DoubleArray<br>
   * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_3D_DoubleArray_create(int, int, int)
   * </code>
   */
  public static native PointerByReference OpenMM_3D_DoubleArray_create(
      int size1, int size2, int size3);
  /**
   * Original signature : <code>
   * void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code>
   */
  public static native void OpenMM_3D_DoubleArray_set(
      PointerByReference array, int index1, int index2, PointerByReference values);
  /**
   * Original signature : <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code>
   */
  public static native void OpenMM_3D_DoubleArray_destroy(PointerByReference array);
  /**
   * DrudeIntegrator<br>
   * Original signature : <code>OpenMM_DrudeIntegrator* OpenMM_DrudeIntegrator_create(double)</code>
   */
  public static native PointerByReference OpenMM_DrudeIntegrator_create(double stepSize);
  /**
   * Original signature : <code>void OpenMM_DrudeIntegrator_destroy(OpenMM_DrudeIntegrator*)</code>
   */
  public static native void OpenMM_DrudeIntegrator_destroy(PointerByReference target);
  /**
   * Original signature : <code>void OpenMM_DrudeIntegrator_step(OpenMM_DrudeIntegrator*, int)
   * </code>
   */
  public static native void OpenMM_DrudeIntegrator_step(PointerByReference target, int steps);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeIntegrator_getDrudeTemperature(const OpenMM_DrudeIntegrator*)</code>
   */
  public static native double OpenMM_DrudeIntegrator_getDrudeTemperature(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeIntegrator_setDrudeTemperature(OpenMM_DrudeIntegrator*, double)</code>
   */
  public static native void OpenMM_DrudeIntegrator_setDrudeTemperature(
      PointerByReference target, double temp);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeIntegrator_getMaxDrudeDistance(const OpenMM_DrudeIntegrator*)</code>
   */
  public static native double OpenMM_DrudeIntegrator_getMaxDrudeDistance(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeIntegrator_setMaxDrudeDistance(OpenMM_DrudeIntegrator*, double)</code>
   */
  public static native void OpenMM_DrudeIntegrator_setMaxDrudeDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeIntegrator_setRandomNumberSeed(OpenMM_DrudeIntegrator*, int)</code>
   */
  public static native void OpenMM_DrudeIntegrator_setRandomNumberSeed(
      PointerByReference target, int seed);
  /**
   * Original signature : <code>
   * int OpenMM_DrudeIntegrator_getRandomNumberSeed(const OpenMM_DrudeIntegrator*)</code>
   */
  public static native int OpenMM_DrudeIntegrator_getRandomNumberSeed(PointerByReference target);
  /**
   * DrudeSCFIntegrator<br>
   * Original signature : <code>OpenMM_DrudeSCFIntegrator* OpenMM_DrudeSCFIntegrator_create(double)
   * </code>
   */
  public static native PointerByReference OpenMM_DrudeSCFIntegrator_create(double stepSize);
  /**
   * Original signature : <code>void OpenMM_DrudeSCFIntegrator_destroy(OpenMM_DrudeSCFIntegrator*)
   * </code>
   */
  public static native void OpenMM_DrudeSCFIntegrator_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeSCFIntegrator_getMinimizationErrorTolerance(const OpenMM_DrudeSCFIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeSCFIntegrator_getMinimizationErrorTolerance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeSCFIntegrator_setMinimizationErrorTolerance(OpenMM_DrudeSCFIntegrator*, double)
   * </code>
   */
  public static native void OpenMM_DrudeSCFIntegrator_setMinimizationErrorTolerance(
      PointerByReference target, double tol);
  /**
   * Original signature : <code>void OpenMM_DrudeSCFIntegrator_step(OpenMM_DrudeSCFIntegrator*, int)
   * </code>
   */
  public static native void OpenMM_DrudeSCFIntegrator_step(PointerByReference target, int steps);
  /**
   * DrudeForce<br>
   * Original signature : <code>OpenMM_DrudeForce* OpenMM_DrudeForce_create()</code>
   */
  public static native PointerByReference OpenMM_DrudeForce_create();
  /** Original signature : <code>void OpenMM_DrudeForce_destroy(OpenMM_DrudeForce*)</code> */
  public static native void OpenMM_DrudeForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>int OpenMM_DrudeForce_getNumParticles(const OpenMM_DrudeForce*)
   * </code>
   */
  public static native int OpenMM_DrudeForce_getNumParticles(PointerByReference target);
  /**
   * Original signature : <code>int OpenMM_DrudeForce_getNumScreenedPairs(const OpenMM_DrudeForce*)
   * </code>
   */
  public static native int OpenMM_DrudeForce_getNumScreenedPairs(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_DrudeForce_addParticle(OpenMM_DrudeForce*, int, int, int, int, int, double, double, double, double)
   * </code>
   */
  public static native int OpenMM_DrudeForce_addParticle(
      PointerByReference target,
      int particle,
      int particle1,
      int particle2,
      int particle3,
      int particle4,
      double charge,
      double polarizability,
      double aniso12,
      double aniso34);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_getParticleParameters(const OpenMM_DrudeForce*, int, int*, int*, int*, int*, int*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_DrudeForce_getParticleParameters(
      PointerByReference target,
      int index,
      IntBuffer particle,
      IntBuffer particle1,
      IntBuffer particle2,
      IntBuffer particle3,
      IntBuffer particle4,
      DoubleBuffer charge,
      DoubleBuffer polarizability,
      DoubleBuffer aniso12,
      DoubleBuffer aniso34);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_getParticleParameters(const OpenMM_DrudeForce*, int, int*, int*, int*, int*, int*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_DrudeForce_getParticleParameters(
      PointerByReference target,
      int index,
      IntByReference particle,
      IntByReference particle1,
      IntByReference particle2,
      IntByReference particle3,
      IntByReference particle4,
      DoubleByReference charge,
      DoubleByReference polarizability,
      DoubleByReference aniso12,
      DoubleByReference aniso34);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_setParticleParameters(OpenMM_DrudeForce*, int, int, int, int, int, int, double, double, double, double)
   * </code>
   */
  public static native void OpenMM_DrudeForce_setParticleParameters(
      PointerByReference target,
      int index,
      int particle,
      int particle1,
      int particle2,
      int particle3,
      int particle4,
      double charge,
      double polarizability,
      double aniso12,
      double aniso34);
  /**
   * Original signature : <code>
   * int OpenMM_DrudeForce_addScreenedPair(OpenMM_DrudeForce*, int, int, double)</code>
   */
  public static native int OpenMM_DrudeForce_addScreenedPair(
      PointerByReference target, int particle1, int particle2, double thole);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_getScreenedPairParameters(const OpenMM_DrudeForce*, int, int*, int*, double*)
   * </code>
   */
  public static native void OpenMM_DrudeForce_getScreenedPairParameters(
      PointerByReference target,
      int index,
      IntBuffer particle1,
      IntBuffer particle2,
      DoubleBuffer thole);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_getScreenedPairParameters(const OpenMM_DrudeForce*, int, int*, int*, double*)
   * </code>
   */
  public static native void OpenMM_DrudeForce_getScreenedPairParameters(
      PointerByReference target,
      int index,
      IntByReference particle1,
      IntByReference particle2,
      DoubleByReference thole);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_setScreenedPairParameters(OpenMM_DrudeForce*, int, int, int, double)
   * </code>
   */
  public static native void OpenMM_DrudeForce_setScreenedPairParameters(
      PointerByReference target, int index, int particle1, int particle2, double thole);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_updateParametersInContext(OpenMM_DrudeForce*, OpenMM_Context*)</code>
   */
  public static native void OpenMM_DrudeForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeForce_setUsesPeriodicBoundaryConditions(OpenMM_DrudeForce*, OpenMM_Boolean)
   * </code>
   */
  public static native void OpenMM_DrudeForce_setUsesPeriodicBoundaryConditions(
      PointerByReference target, int periodic);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_DrudeForce_usesPeriodicBoundaryConditions(const OpenMM_DrudeForce*)
   * </code>
   */
  public static native int OpenMM_DrudeForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /**
   * DrudeLangevinIntegrator<br>
   * Original signature : <code>
   * OpenMM_DrudeLangevinIntegrator* OpenMM_DrudeLangevinIntegrator_create(double, double, double, double, double)
   * </code>
   */
  public static native PointerByReference OpenMM_DrudeLangevinIntegrator_create(
      double temperature,
      double frictionCoeff,
      double drudeTemperature,
      double drudeFrictionCoeff,
      double stepSize);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeLangevinIntegrator_destroy(OpenMM_DrudeLangevinIntegrator*)</code>
   */
  public static native void OpenMM_DrudeLangevinIntegrator_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeLangevinIntegrator_getTemperature(const OpenMM_DrudeLangevinIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeLangevinIntegrator_getTemperature(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeLangevinIntegrator_setTemperature(OpenMM_DrudeLangevinIntegrator*, double)
   * </code>
   */
  public static native void OpenMM_DrudeLangevinIntegrator_setTemperature(
      PointerByReference target, double temp);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeLangevinIntegrator_getFriction(const OpenMM_DrudeLangevinIntegrator*)</code>
   */
  public static native double OpenMM_DrudeLangevinIntegrator_getFriction(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeLangevinIntegrator_setFriction(OpenMM_DrudeLangevinIntegrator*, double)</code>
   */
  public static native void OpenMM_DrudeLangevinIntegrator_setFriction(
      PointerByReference target, double coeff);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeLangevinIntegrator_getDrudeFriction(const OpenMM_DrudeLangevinIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeLangevinIntegrator_getDrudeFriction(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeLangevinIntegrator_setDrudeFriction(OpenMM_DrudeLangevinIntegrator*, double)
   * </code>
   */
  public static native void OpenMM_DrudeLangevinIntegrator_setDrudeFriction(
      PointerByReference target, double coeff);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeLangevinIntegrator_step(OpenMM_DrudeLangevinIntegrator*, int)</code>
   */
  public static native void OpenMM_DrudeLangevinIntegrator_step(
      PointerByReference target, int steps);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeLangevinIntegrator_computeSystemTemperature(OpenMM_DrudeLangevinIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeLangevinIntegrator_computeSystemTemperature(
      PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeLangevinIntegrator_computeDrudeTemperature(OpenMM_DrudeLangevinIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeLangevinIntegrator_computeDrudeTemperature(
      PointerByReference target);
  /**
   * DrudeNoseHooverIntegrator<br>
   * Original signature : <code>
   * OpenMM_DrudeNoseHooverIntegrator* OpenMM_DrudeNoseHooverIntegrator_create(double, double, double, double, double, int, int, int)
   * </code>
   */
  public static native PointerByReference OpenMM_DrudeNoseHooverIntegrator_create(
      double temperature,
      double collisionFrequency,
      double drudeTemperature,
      double drudeCollisionFrequency,
      double stepSize,
      int chainLength,
      int numMTS,
      int numYoshidaSuzuki);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeNoseHooverIntegrator_destroy(OpenMM_DrudeNoseHooverIntegrator*)</code>
   */
  public static native void OpenMM_DrudeNoseHooverIntegrator_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeNoseHooverIntegrator_getMaxDrudeDistance(const OpenMM_DrudeNoseHooverIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeNoseHooverIntegrator_getMaxDrudeDistance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_DrudeNoseHooverIntegrator_setMaxDrudeDistance(OpenMM_DrudeNoseHooverIntegrator*, double)
   * </code>
   */
  public static native void OpenMM_DrudeNoseHooverIntegrator_setMaxDrudeDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeNoseHooverIntegrator_computeDrudeKineticEnergy(OpenMM_DrudeNoseHooverIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeNoseHooverIntegrator_computeDrudeKineticEnergy(
      PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeNoseHooverIntegrator_computeTotalKineticEnergy(OpenMM_DrudeNoseHooverIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeNoseHooverIntegrator_computeTotalKineticEnergy(
      PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeNoseHooverIntegrator_computeSystemTemperature(OpenMM_DrudeNoseHooverIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeNoseHooverIntegrator_computeSystemTemperature(
      PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_DrudeNoseHooverIntegrator_computeDrudeTemperature(OpenMM_DrudeNoseHooverIntegrator*)
   * </code>
   */
  public static native double OpenMM_DrudeNoseHooverIntegrator_computeDrudeTemperature(
      PointerByReference target);

  public static class OpenMM_Context extends PointerType {
    public OpenMM_Context(Pointer address) {
      super(address);
    }

    public OpenMM_Context() {
      super();
    }
  };

  public static class OpenMM_DrudeLangevinIntegrator extends PointerType {
    public OpenMM_DrudeLangevinIntegrator(Pointer address) {
      super(address);
    }

    public OpenMM_DrudeLangevinIntegrator() {
      super();
    }
  };

  public static class OpenMM_3D_DoubleArray extends PointerType {
    public OpenMM_3D_DoubleArray(Pointer address) {
      super(address);
    }

    public OpenMM_3D_DoubleArray() {
      super();
    }
  };

  public static class OpenMM_DrudeForce extends PointerType {
    public OpenMM_DrudeForce(Pointer address) {
      super(address);
    }

    public OpenMM_DrudeForce() {
      super();
    }
  };

  public static class OpenMM_DrudeNoseHooverIntegrator extends PointerType {
    public OpenMM_DrudeNoseHooverIntegrator(Pointer address) {
      super(address);
    }

    public OpenMM_DrudeNoseHooverIntegrator() {
      super();
    }
  };

  public static class OpenMM_DrudeSCFIntegrator extends PointerType {
    public OpenMM_DrudeSCFIntegrator(Pointer address) {
      super(address);
    }

    public OpenMM_DrudeSCFIntegrator() {
      super();
    }
  };

  public static class OpenMM_DoubleArray extends PointerType {
    public OpenMM_DoubleArray(Pointer address) {
      super(address);
    }

    public OpenMM_DoubleArray() {
      super();
    }
  };

  public static class OpenMM_DrudeIntegrator extends PointerType {
    public OpenMM_DrudeIntegrator(Pointer address) {
      super(address);
    }

    public OpenMM_DrudeIntegrator() {
      super();
    }
  };
}
